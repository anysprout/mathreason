{
  "hash": "a1bafbddb27c819d744a0d3e205a41d2",
  "result": {
    "markdown": "---\ntitle: \"Semantic Properties\"\n---\n\nIn this section we will discuss the logical operators in greater depth. Our focus will be on what are called \"semantic properties\", which is to say, properties of these objects which determine their truth-values.\n\n# Tautology, Contradiction, and Contingency\n\nA naturally interesting idea, is that of a proposition which is \"always true\". The simplest example is $P\\lor (\\neg P)$, or if we want to use our assumption that negation takes precedence, we could just write this as $P\\lor \\neg P$.\n\nThe formal definition: a **tautology** is a proposition $\\alpha$ such that $\\alpha^{\\mathcal E^*} = T$ for every variable evaluation $\\mathcal E$. Another way that we could say this is \"true at every row of the truth-table\" since variable evaluations are no different from rows of the truth-table.\n\n::: {.callout-important title=\"Small Tautology\" appearance=\"minimal\"}\nExercise:\n\nDraw the truth-table for $P\\lor \\neg P$ and confirm that it is true at every row.\n\nAlso try to come up with another proposition which is also always true.\n:::\n\nOf course there is the dual concept of a **contradiction**, which is any proposition which is false at every row of its truth table. The negation of any tautology is a contradiction, and the negation of any contradiction is a tautology. Propositions which are neither a tautology nor contradiction, are called **contingencies**.\n\n::: {.callout-important title=\"Negate Contingencies\" appearance=\"minimal\"}\nExercise:\n\nGive examples of contradictions and contingencies.\n\n------------------------------------------------------------------------\n\nProve that the negation of a contingency is always a contingency.\n:::\n\nWe will write $\\top$ as a symbol which represents $P\\lor \\neg P$ and we write $\\bot$ for $P\\land \\neg P$.\n\n::: {.callout-important title=\"Tautology Properties\" appearance=\"minimal\"}\nExercise:\n\nProve that if $\\alpha$ is any proposition then $\\top \\lor \\alpha$ is equivalent to $\\top$. Also prove that $\\top \\land \\alpha$ is equivalent to $\\alpha$.\n\n(Note: Why \"$\\alpha$?\" Well I don't just mean the proposition $P$, made from a single variable, nor do I mean the proposition $P\\land Q$, or any other specific proposition. Rather I want to talk about *any* proposition. This is what $\\alpha$ is meant to represent.)\n:::\n\n::: {.callout-important title=\"Contradiction Properties\" appearance=\"minimal\"}\nExercise:\n\nDiscover laws for $\\bot$ similar to what we found above for $\\top$.\n:::\n\n::: {.callout-important title=\"Tautological Equivalence\" appearance=\"minimal\"}\nExercise:\n\nProve that two propositions, $\\alpha$ and $\\beta$, are equivalent if and only if $\\alpha \\leftrightarrow \\beta$ is a tautology.\n:::\n\n## Famous Tautologies\n\nThe following is a summary of famous equivalences. They are each stated as a biconditional, so what I am showing is a collection of tautological biconditional propositions. In light of the exercise above, showing that propositions are equivalent if and only if their corresponding biconditional is a tautology, it should be clear which propositions are equivalent in the following summary.\n\n::: {.callout-note title=\"Double Negation\" appearance=\"minimal\"}\n$$\n\\neg(\\neg \\alpha) \\leftrightarrow \\alpha  \n$$\n:::\n\n::: {.callout-note title=\"Top to Bot\" appearance=\"minimal\"}\n$$\n\\neg \\top \\leftrightarrow \\bot\n$$\n:::\n\n::: {.callout-note title=\"Bot to Top\" appearance=\"minimal\"}\n$$\n\\neg \\bot \\leftrightarrow \\top \n$$\n:::\n\n::: {.callout-note title=\"Or Idempotence\" appearance=\"minimal\"}\n$$\n(\\alpha\\lor\\alpha) \\leftrightarrow \\alpha\n$$\n:::\n\n::: {.callout-note title=\"Or Commutativity\" appearance=\"minimal\"}\n$$\n(\\alpha\\lor \\beta) \\leftrightarrow (\\beta\\lor \\alpha)\n$$\n:::\n\n::: {.callout-note title=\"Or Associativity\" appearance=\"minimal\"}\n$$\n(\\alpha\\lor(\\beta\\lor\\gamma)) \\leftrightarrow ((\\alpha\\lor\\beta)\\lor\\gamma)\n$$\n:::\n\n::: {.callout-note title=\"Or Idempotence\" appearance=\"minimal\"}\n$$\n\\alpha\\lor\\alpha \\leftrightarrow \\alpha\n$$\n:::\n\n::: {.callout-note title=\"Or Tautology\" appearance=\"minimal\"}\n$$\n\\alpha\\lor\\top \\leftrightarrow \\top\n$$\n:::\n\n::: {.callout-note title=\"Or Contradiction\" appearance=\"minimal\"}\n$$\n\\alpha\\lor\\bot \\leftrightarrow \\alpha\n$$\n:::\n\n::: {.callout-note title=\"And Commutativity\" appearance=\"minimal\"}\n$$\n(\\alpha\\land\\beta) \\leftrightarrow (\\beta\\land\\alpha)\n$$\n:::\n\n::: {.callout-note title=\"And Associativity\" appearance=\"minimal\"}\n$$\n(\\alpha\\land(\\beta\\land \\gamma))\\leftrightarrow ((\\alpha\\land\\beta)\\land \\gamma)\n$$\n:::\n\n::: {.callout-note title=\"And Idempotence\" appearance=\"minimal\"}\n$$\n\\alpha\\land\\alpha\\leftrightarrow \\alpha\n$$\n:::\n\n::: {.callout-note title=\"And Tautology\" appearance=\"minimal\"}\n$$\n\\alpha\\land\\top \\leftrightarrow \\alpha\n$$\n:::\n\n::: {.callout-note title=\"And Contradiction\" appearance=\"minimal\"}\n$$\n\\alpha\\land\\bot \\leftrightarrow \\bot\n$$\n:::\n\n::: {.callout-note title=\"And Distribution over Or\" appearance=\"minimal\"}\n$$\n(\\alpha \\land (\\beta\\lor\\gamma)) \\leftrightarrow ((\\alpha\\land\\beta)\\lor(\\alpha\\land\\gamma))\n$$\n:::\n\n::: {.callout-note title=\"Or Distribution over And\" appearance=\"minimal\"}\n$$\n(\\alpha\\lor(\\beta\\land\\gamma)) \\leftrightarrow ((\\alpha\\lor\\beta)\\land(\\alpha\\lor\\gamma))\n$$\n:::\n\n::: {.callout-note title=\"Or De Morgan's\" appearance=\"minimal\"}\n$$\n\\neg(\\alpha\\lor\\beta)\\leftrightarrow (\\neg\\alpha\\land\\neg\\beta)\n$$\n:::\n\n::: {.callout-note title=\"And De Morgan's\" appearance=\"minimal\"}\n$$\n\\neg(\\alpha\\land\\beta) \\leftrightarrow (\\neg\\alpha\\lor\\neg\\beta)\n$$\n:::\n\n::: {.callout-note title=\"Arrow to Or\" appearance=\"minimal\"}\n$$\n(\\alpha\\to\\beta) \\leftrightarrow (\\neg\\alpha\\lor\\beta)\n$$\n:::\n\n::: {.callout-note title=\"Neg Arrow\" appearance=\"minimal\"}\n$$\n\\neg(\\alpha\\to\\beta) \\leftrightarrow (\\alpha\\land\\neg\\beta)\n$$\n:::\n\n::: {.callout-note title=\"Arrow Almost Idempotence\" appearance=\"minimal\"}\n$$\n(\\alpha\\to\\neg\\alpha) \\leftrightarrow \\neg \\alpha\n$$\n:::\n\n::: {.callout-note title=\"Arrow Top\" appearance=\"minimal\"}\n$$\n(\\top\\to\\alpha)\\leftrightarrow \\alpha\n$$\n:::\n\n::: {.callout-note title=\"Arrow Bot\" appearance=\"minimal\"}\n$$\n(\\alpha\\to\\bot)\\leftrightarrow \\neg\\alpha\n$$\n:::\n\n::: {.callout-note title=\"Binconditional Sameness\" appearance=\"minimal\"}\n$$\n(\\alpha\\leftrightarrow\\beta) \\leftrightarrow ([\\alpha\\land\\beta]\\lor[\\neg\\alpha\\land\\neg\\beta])\n$$\n:::\n\n::: {.callout-important title=\"Prove Famous Equivalences\" appearance=\"minimal\"}\nExercise:\n\nProve any of the above.\n:::\n\n# Entailment and Satisfaction\n\nPerhaps the most important concept in this section is entailment. It is what allows us to infer some propositions from other propositions in an argument -- and that is, after all, our primary interest. Take for example \"$x\\ne 1$. And if $x\\ne 1$ then $x-1\\ne 0$. Therefore $x-1\\ne 0$.\" This is an inference from two sentences\n\n-   $x\\ne 1$\n-   If $x\\ne 1$ then $x-1\\ne 0$.\n\nto the sentence $x-1\\ne 0$. We can abstract this pattern as the following argument form: \"$\\alpha$. And if $\\alpha$ then $\\beta$. Therefore $\\beta$.\" We can in fact collect all of this into a single abstract proposition using the operators that we've studied:\n\n$$\n(\\alpha\\land[\\alpha\\to\\beta])\\to \\beta\n$$\n\n::: {.callout-important title=\"Modus Ponens Tautology\" appearance=\"minimal\"}\nExercise:\n\nProve that $(\\alpha\\land[\\alpha\\to\\beta])\\to\\beta$ is a tautology.\n:::\n\nMore generally we can say that a proposition $\\alpha$ **entails** the proposition $\\beta$ if $\\alpha\\to\\beta$ is a tautology.\n\n::: {.callout-important title=\"Case Elimination Entailment\" appearance=\"minimal\"}\nExercise:\n\nProve that $(\\alpha\\lor\\beta)\\land\\neg\\alpha$ entails $\\beta$.\n\nAlso prove that $\\beta$ does **not** entail $(\\alpha\\lor\\beta)\\land\\neg\\alpha$.\n:::\n\n::: {.callout-important title=\"Mutual Entailment Equivalence\" appearance=\"minimal\"}\nExercise:\n\nProve that $\\alpha$ is equivalent to $\\beta$ if and only if $\\alpha$ entails $\\beta$ and also $\\beta$ entails $\\alpha$.\n:::\n\n::: {.callout-important title=\"Truth Table Entailment\" appearance=\"minimal\"}\nExercise:\n\nProve that $\\alpha$ entails $\\beta$ if and only if there is no row of the truth-tables of $\\alpha$ and $\\beta$ at which $\\alpha$ is true and $\\beta$ is false.\n\n------------------------------------------------------------------------\n\nIn particular, use the above to prove that a contradiction entails every proposition. Also, the only proposition that a tautology can entail is another tautology.\n:::\n\nSo far, we have discussed entailment in terms of one proposition entailing another proposition. However, we will have many occasions to talk about an entire *set* of propositions entailing some particular proposition.\n\nTake for instance the entire *theory* of Euclidean geometry. This \"theory\" is in fact just a collection of related propositions, like propositions about the existence of points and lines and other geometric figures. We will also want to talk about the idea that the theory of geometry entails certain facts. For instance we may want to say that \"the theory of Euclidean geometry entails the Pythagorean theorem.\"\n\nIn order to help us capture this idea, we will let $\\Gamma$ represent any set of propositions.[^1] We then say that $\\Gamma$ **entails** a proposition $\\alpha$ if every variable evaluation which satisfies $\\Gamma$ also satisfies $\\alpha$.\n\n[^1]: So $\\Gamma$ could be the empty set or the entire theory of Euclidean geometry. It is just any set of propositions.\n\nOf course now I have to tell you what \"satisfies\" means, although one could probably guess its meaning before I tell you. We say that the variable evaluation $\\mathcal E$ **satisfies** the proposition $\\alpha$ if $\\alpha^{\\mathcal E^*}=T$. $\\mathcal E$ satisfies the set $\\Gamma$ if $\\mathcal E$ satisfies every sentence in $\\Gamma$. We say that the set $\\Gamma$ is **satisfiable** if there exists a variable evaluation which satisfies it.\n\n::: {.callout-important title=\"Satisfaction Exercise\" appearance=\"minimal\"}\n1.  Decide which of the following sets are satisfiable.\n\n$$\n\\{P\\}, \\quad \\{P,\\neg P\\}, \\quad \\{P, P\\to Q, \\neg Q\\}\n$$\n\n------------------------------------------------------------------------\n\n2.  Give an example of an infinite set of propositions which is satisfiable. (We are allowed to use an infinite set of propositional variables, like for instance $\\{P_1,P_2, P_3, \\dots\\}$. So this is an example. However, because it is too easy, try this harder challenge: Come up with an infinite set of propositions, using only **one** propositional variable $P$, which is satisfiable.)\n\n    Also come up with an infinite set of propositional variables which is *not* satisfiable.\n\n    Notice that infinite sets are important, since the theory of Euclidean geometry -- and in fact almost every interesting mathematical theory! -- is composed of infinitely many propositions.\n\n    Indeed, we probably wouldn't really need to talk about evaluation, if it weren't for the importance of infinite sets. Otherwise we could have just relied on the truth-table for everything. But truth-tables are finite objects and only well-defined and understood for finite sets of propositions.\n\n------------------------------------------------------------------------\n\n3.  Show that the proposition $\\alpha$ entails the proposition $\\beta$ if and only if the set $\\{\\alpha\\}$ entails the proposition $\\beta$.\n\n------------------------------------------------------------------------\n\n4.  Show that a set $\\Gamma$ entails the proposition $\\alpha$ if and only if there is no variable evaluation $\\mathcal E$ which satisfies $\\Gamma$ and not $\\alpha$.\n\n    Use this result to argue that the empty set, $\\emptyset$, entails every proposition.\n:::\n\nWe often use the notation $\\mathcal E\\vDash \\alpha$ and $\\mathcal E\\vDash \\Gamma$ to express that $\\mathcal E$ satisfies the proposition $\\alpha$ or the set $\\Gamma$, respectively. We use the notation $\\Gamma\\vDash \\alpha$ to express that $\\Gamma$ entails $\\alpha$.\n\n::: {.callout-important title=\"Explain the Difference\" appearance=\"minimal\"}\nExplain the difference between satisfaction and entailment. Hint: Almost all of the difference is explained by the *types* of objects involved.\n:::\n\n# Satisfaction in Python\n\nHere is code from previous sections, which we will need for the code after it.\n\n::: {#f5cfe53e .cell execution_count=1}\n``` {.python .cell-code}\nimport pyparsing\n\nclass Proposition:\n    pass\n\nclass PropVariable(Proposition):\n    def __init__(self, v):\n        assert (type(v) == type(\"\") and len(v) == 1) \n        self.v = v\n    def __str__(self):\n        return(self.v)\n    def eval(self, prop_eval):\n        return prop_eval(self.v)\n\nclass Negation(Proposition):\n    def __init__(self, beta):\n        assert issubclass(type(beta),Proposition)\n        self.neg = beta\n    def __str__(self):\n        return(\"(not \" + str(self.neg) + \")\")\n    def eval(self, prop_eval):\n        return(1 - self.neg.eval(prop_eval))\n\nclass Disjunction(Proposition):\n    def __init__(self, beta, gamma):\n        assert issubclass(type(beta),Proposition) \\\n            and issubclass(type(gamma),Proposition)\n        self.left, self.right = beta, gamma\n    def __str__(self):\n        return(\"(\" + str(self.left )+\" or \" + str(self.right) + \")\")\n    def eval(self, prop_eval):\n        l, r = self.left.eval(prop_eval), self.right.eval(prop_eval)\n        return( l + r - l*r )\n\ndef parseTree(p):\n    if type(p) == type(\"\"):\n        return PropVariable(p)\n    if len(p) == 1:\n        return parseTree(p[0])\n    if len(p) == 2:\n        assert( p[0] == \"not\" )\n        return Negation(parseTree(p[1]))\n    \n    if len(p) == 3:\n        if p[1] == \"or\": return Disjunction(parseTree(p[0]), parseTree(p[2]))\n        raise Exception(\"length 3 list but unrecognized middle token\")\n    raise Exception(\"length of list unrecognized\")\n\nterms = pyparsing.Word(pyparsing.alphas) | \"not\" | \"and\" | \"or\" | \"if\" | \"then\" | \"iff\" \nnesting = pyparsing.nestedExpr( '(', ')', content=terms )\n\ndef shape(s): \n    p = nesting.parseString(\"(\"+s+\")\")[0]\n    \n    return parseTree(p)\n\ndef eval(prop_string, prop_eval):\n    return bool((shape(prop_string)).eval(prop_eval))\n```\n:::\n\n\nBelow is code to find the set of all of the propositional variables in a given proposition. It is effectively a depth-first search of the parse tree.\n\n::: {#19b393dc .cell execution_count=2}\n``` {.python .cell-code}\ndef all_prop_vars(p):\n    if type(p) == PropVariable:\n        return set(p.v)\n    if type(p) == Negation:\n        return all_prop_vars(p.neg)\n    if type(p) == Disjunction:\n        return set(all_prop_vars(p.left)).union(set(all_prop_vars(p.right)))\n```\n:::\n\n\nAnd here is code to take a set of variables, and return a list of all possible variable evaluations for those variables.\n\n::: {#5c9023a2 .cell execution_count=3}\n``` {.python .cell-code}\ndef all_var_evals(var_set):\n    # The bucket is an \"accumulator\" variable, into which I will place each evaluation as I \n    # construct them.  The bucket will then be returned at the end.\n    bucket = []\n    var_list = list(var_set) # Gives the variables an indexing (ordering)\n    for row in range(2**(len(var_set))): # 2^n evaluations\n        # From this part of the code to the end, you may find it a little hard to understand.\n        # The way it's implemented depends the fact that every number can be written in \n        # binary, and every binary number can be associated with a variable evaluation.  \n        # Since this is a bit complicated, feel free to not worry about how the rest of this function is implemented.\n        to_bin = row \n        func_list = []\n        while to_bin != 0:\n            func_list.insert(0, to_bin % 2)\n            to_bin -= to_bin % 2\n            to_bin //= 2\n        while len(func_list) < len(var_list):\n            func_list.insert(0,0)\n        bucket.append(lambda x, fl=func_list: fl[var_list.index(x)])\n    return bucket\n```\n:::\n\n\nThe code below demonstrates its use. In summary, this creates a proposition, then turns that proposition into a tree (`shape(proposition)`), then extracts all of its propositional variables (`all_prop_vars(shape(proposition))`). This is a list of all possible variable evaluations, so there should be 8 of them in total. We evaluate the proposition using each one, and just like with the truth-table for this proposition, precisely one should be false and all others should be true.\n\n::: {#2f408eb9 .cell execution_count=4}\n``` {.python .cell-code}\nproposition = \"(P or Q) or R\"\nevals = all_var_evals(all_prop_vars(shape(proposition)))\nfor e in evals:\n    print(eval(proposition, e))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nFalse\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\n```\n:::\n:::\n\n\n::: {.callout-important title=\"Python Set Satisfaction\" appearance=\"minimal\"}\nWrite a function `set_sat(prop_set, var_eval)`. As you can see, the function should take two arguments, `prop_set` and `var_eval`. The argument `prop_set` is a set of propositions, for example `{\"P\", \"if P then Q\"}`. The argument `var_eval` is a variable evaluation. The function should return `True` if `var_eval` satisfies `prop_set`.\n\n------------------------------------------------------------------------\n\nHere's a funny question. Does it make any sense to talk about satisfying the *empty* set of propositions? That is to say, if $\\mathcal E$ is a variable assignment, does it make any sense to talk about whether $\\mathcal E\\vDash \\emptyset$?\n\nHere are a few ways to think about the problem.\n\n1.  Run the function you designed above and see what it says.\n\n2.  Observe that in general, the fewer premises you have, the \"weaker\" your premise set is ... in the following sense.\n\n    If you have $\\{P,Q\\}$, then this is satisfied by relatively few variable evaluations. On the other hand $\\{P\\}$ is satisfied by relatively more. In particular, every variable evaluation which satisfies $\\{P,Q\\}$ also satisfies $\\{P\\}$, but here is an example of a variable evaluation which satisfies $\\{P\\}$ but not $\\{P,Q\\}$:\n\n    $$\n    P^{\\mathcal E}=T, \\quad Q^{\\mathcal E}=F\n    $$\n\n    Continuing the trend toward the farthest extreme, then what is the set of variable evaluations which satisfy $\\emptyset$?\n\n3.  In mathematics we often run into cases, like this, of \"vacuous quantification\". In this particular case, it goes like this: \"$\\mathcal E\\vDash \\emptyset$ means that for every $\\alpha\\in\\emptyset$ (there isn't any such $\\alpha$, of course) we have that $\\mathcal E \\vDash \\alpha$.\" Another place where this comes up is with the subset relation between sets. We say that $X\\subseteq Y$ means that every $x\\in X$ is also $x\\in Y$. When $X=\\emptyset$, then there is no such $x$. \\\n    \\\n    Whenever empty quantification comes up, we always say that the sentence is true. That is to say, in mathematics we say that $\\emptyset\\subseteq Y$ for every set $Y$, because empty quantification is always true. Therefore likewise we also say that $\\mathcal E\\vDash \\emptyset$. \\\n    \\\n    The reason why we have this convention is, like we have observed in (1.) and (2.), it is a continuation of a trend or pattern. But for another reason, it is a *conditional* statement! It says \"IF $\\alpha\\in\\emptyset$ ...\" or \"IF $x\\in \\emptyset …$. Since the antecedent of the conditional here is false, then therefore we regard the conditional proposition as true!\n:::\n\n::: {.callout-important title=\"Tautology, Contradiction, Contingency in Python\" appearance=\"minimal\"}\nWrite a Python function, which uses the above, to take a proposition as an argument, and return `True` if it's a tautology. Also write a function which decides if a proposition is a contradiction. Also write a function which decides if a proposition is a contingency.\n:::\n\n::: {.callout-important title=\"Entailment\" appearance=\"minimal\"}\nWrite a Python function which takes two arguments -- the first argument is a list (or set) of propositions, and the second argument is a single proposition. The function then returns `True` if the set of propositions entails the second argument, and `False` otherwise.\n\nTest your product.\n\n------------------------------------------------------------------------\n\nThe officially accepted answer in mathematics and logic is \"yes\"! If we think about the definition of entailment, applied here, we would need to be able to decide whether a given variable assignment $\\mathcal E$ satisfies $\\emptyset$.\n:::\n\n",
    "supporting": [
      "op_props_files"
    ],
    "filters": [],
    "includes": {}
  }
}
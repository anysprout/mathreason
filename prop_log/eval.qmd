---
title: "Propositional Evaluation"
---

We will often need to talk about the rows of a truth-table, and therefore in this section we will introduce some language to help us. In particular, we will identify each row of the truth-table with a variable evaluation.

# Variable Evaluations

Take for example the proposition $P\lor (Q\lor R)$. One variable evaluation of this proposition is given by $P^{\mathcal E}=F,Q^{\mathcal E} = T, R^{\mathcal E}=F$. This is just notation for the assignment of $F$ to $P$, and $T$ to $Q$, and $F$ to $R$, and this naturally corresponds to one of the rows of the truth-table.[^1] Note that $\mathcal E$ is the variable evaluation, and it assigns the values $F,T,F$ to the variables $P,Q,R$ -- from this perspective, $\mathcal E$ is a function

[^1]: The sixth one down, as we have shown the truth-table above.

$$
\mathcal E :\text{Var}\to \{T,F\}
$$

where $\text{Var}$ is the set of variables which occur in the proposition.[^2] So hopefully it makes sense if we now officially define the term. Let $\alpha$ be any proposition, and $\text{Var}$ be its set of variables. Then a **variable evaluation** for $\alpha$ is any function $\mathcal E:V\to\{T,F\}$ where $\text{Var}\subseteq V$.

[^2]: Note: The notation in $P^{\mathcal E}$ is just unusual notation, which is really just function evaluation. Usually we write "the value of the function $f$ on input $x$" as $f(x)$. For whatever reason, in logic we instead write "the value of the function $\mathcal E$ on input $P$" as $P^{\mathcal E}$.

::: {.callout-important title="Find a Variable Evaluation" appearance="minimal"}
Exercise:

Give any other example of a variable evaluation for $P\lor (Q\lor R)$.

Is it possible to have a variable evaluation for $P\lor (Q\lor R)$ which is also a variable evaluation for $P\land Q$? Make sure that you explain why the official definition of a variable evaluation requires $\text{Var}\subseteq V$ in order to make sense here.
:::

# Evaluations

Of course we are not just interested in assigning values to the variables. We are ultimately interested in observing how variable assignments determine a value for the proposition. Returning to the example above, what value does $\mathcal E$ determine for the proposition $P\lor (Q\lor R)$? Well of course we already calculated this in the truth-table, and found that the value is $T$.

## True = 1, False = 0

To give this an official, technical definition, it will help if we make the identification that $T$ is actually just a symbol for the number 1, and $F$ is actually just a symbol for the number 0. Indeed Python is designed in a way that reflects this reality "under the hood" of what $T$ and $F$ really are.

```{python}
print("1 and 1 = " + str(1 and 1))
print("1 and 0 = " + str(1 and 0))
```

What the code above shows is that, instead of using booleans `True` and `False`, one could just as well use the numbers 1 and 0 instead, and the behavior will be the same. In particular, the `and` operator is comfortable being given inputs which are booleans or the numbers 0 and 1.[^3]

[^3]: Python is also comfortable taking other numbers instead of booleans, but this is not important for our current purposes.

Because $T$ and $F$ can be regarded as simply the numbers 1 and 0, we will allow ourselves to therefore perform the usual arithmetic operations on them. That is to say, we will understand that $T+T = 2$ is a true equation, since it merely says $1+1=2$. Likewise $TF=F$ where we regard the concatenation on the left as multiplication, and so on. Therefore this equation is true because $1\cdot 0=0$.

::: {.callout-important title="Boolean Formulas" appearance="minimal"}
In order to compute a particular part of the truth-table for a conjunction, we use the rule that $T\land T=T$ and $T\land F = F$ and $F\land T=F$ and $F\land F=F$. But these just say the already familiar computations $1\cdot 1=1$ and $1\cdot 0=0$ and $0\cdot 1=0$ and $0\cdot 0=0$. Therefore we can express a formula for computing the conjunction of truth-values:

$$
x\land y = x\cdot y
$$

Confirm that there is also a formula for disjunction,

$$
x\lor y = x+y-xy
$$

------------------------------------------------------------------------

Find a formula for negation.
:::

## The Evaluation Definition

We now have the setup necessary to define an evaluation function. Let $\alpha$ be a proposition and $\mathcal E: V\to\{T,F\}$ any variable evaluation for $\alpha$. Define the extension of $\mathcal E$, the function $\mathcal E^*$, by:

1.  If $P$ is any propositional variable $P\in V$ then define $P^{\mathcal E^*}=P^{\mathcal E}$.[^4]

2.  If $\alpha$ is a formula of the form $\neg \beta$ then $\alpha^{\mathcal E^*} = 1-\beta^{\mathcal E^*}$.[^5]

3.  If $\alpha$ is $\beta\lor\gamma$ then $\alpha^{\mathcal E^*} = F$ if $\beta^{\mathcal E^*}=F$ and $\gamma^{\mathcal E^*}=F$. Otherwise $\alpha^{\mathcal E^*}= T$.\

4.  For definitions when $\alpha$ is $\beta\land\gamma,\beta\to\gamma,$ or $\beta\leftrightarrow \gamma$, see the exercises below.

[^4]: This merely says: If you want to evaluate a propositional variable, then just use the variable evaluation. So for instance if $\mathcal E$ evaluates $P^{\mathcal E}=T$, then in the extended evaluation, $\mathcal E^*$, it does exactly the same thing to $P$. Namely, $P^{\mathcal E^*}=T$.

[^5]: Explanation: Take for example $\alpha=\neg P$. In this case, then, $\beta=P$. Also consider this, with variable evaluation $\mathcal E$ which evaluates $P^{\mathcal E}=T$. <br> What should we then say is the value of $\neg P$? Well it's the negation of $T$, which is $1-T$ which is $F$. The rule above reflects this, by saying that $(\neg P)^{\mathcal E^*} = 1-P^{\mathcal E^*}$ which is just $1-P^{\mathcal E} = 1-T$.

This definition is often confusing to a student seeing this for the first time, so let's see the idea in practice -- hopefully if you see it used enough times, you'll actually come to see the definition as quite familiar. The new kind of formalism being used here, just takes some getting used to.

::: {.callout-tip title="Evaluation Demonstrations" appearance="minimal"}
Let us consider the propositions $$
P
$$

and $$
P\lor (Q\lor (\neg P))
$$

We will also consider the example variable evaluation $\mathcal E$ given by

$$
P^{\mathcal E}=F,Q^{\mathcal E}=T,R^{\mathcal E}=F
$$

Let us use the definition above to find the evaluations $P^{\mathcal E^*}$ and $(P\lor (Q\lor (\neg P)))^{\mathcal E^*}$.

------------------------------------------------------------------------

For the former, this is very simple and immediate. By clause (1) above, we merely use the variable evaluation.

$$
P^{\mathcal E^*} = P^{\mathcal E} = F
$$

------------------------------------------------------------------------

Now let's find $(P\lor(Q\lor (\neg P)))^{\mathcal E^*}$. Because this is a disjunction, we use clause (3), which indicates that we must find the evaluation of each disjunct.

We first must find the evaluation of the left disjunct, $P^{\mathcal E^*}$. But we already did that above and found $P^{\mathcal E^*}=F$.

So we now find the right-hand side $(Q\lor(\neg P))^{\mathcal E^*}$. To find this again we need to find the values on either side of the $\lor$. From a calculation like before, we find that $Q^{\mathcal E^*}=T$.

In order to find $(\neg P)^{\mathcal E^*}$ we use clause 2. This tells us that

$$
(\neg P)^{\mathcal E^*} = 1-P^{\mathcal E^*} = 1-F = 1
$$

where the first equality is due to clause 2, the second is due to our earlier calcuation, and the last is because $F$ is the same as 0.

Now we can find

$$
(Q\lor(\neg P))^{\mathcal E^*} = T
$$

by clause 3, because we know that not both sides of the disjunction evaluated to false (in fact both evaluated to true).

Finally we can now decide

$$
(P\lor(Q\lor (\neg P)))^{\mathcal E^*} = T
$$

because by clause 3, not both sides evaluated to false (the left evaluated to false but the right evaluated to true).
:::

::: {.callout-important title="Now You Evaluate" appearance="minimal"}
Using the same variable evaluation $\mathcal E$ above, find $(P\lor (\neg R))^{\mathcal E^*}$.
:::

::: {.callout-important title="Other Evaluation Rules" appearance="minimal"}
I left the rule for the evaluation of, for instance, $P\land Q$, unspecified. However, as you can see from the rule for $\lor$, this rule merely takes the evaluation of the left-hand disjunct, and the right-hand disjunct, and "puts them together" in the way that we're familiar with from the truth-table.

Come write down a rule for conjunction, like the one I explicitly gave for disjunction. Then use it to evaluate $P\land Q$ using the same variable evaluation as above.

Then do likewise for $\to$ and $\leftrightarrow$. Make up your own examples to exercise these ideas.
:::

# A Python Evaluation Implementation

We can implement the evaluator in code, using what we built previously for the parse tree! First we must reproduce all of the code used to take an input string and produce its parse tree. But we will agument the classes with an `eval` function, reflected by the rules above.

```{python}

import pyparsing

class Proposition:
    pass

class PropVariable(Proposition):
    def __init__(self, v):
        assert (type(v) == type("") and len(v) == 1) 
        self.v = v
    def __str__(self):
        return(self.v)
    def eval(self, prop_eval):
        return prop_eval(self.v)

class Negation(Proposition):
    def __init__(self, beta):
        assert issubclass(type(beta),Proposition)
        self.neg = beta
    def __str__(self):
        return("(not " + str(self.neg) + ")")
    def eval(self, prop_eval):
        return(1 - self.neg.eval(prop_eval))

class Disjunction(Proposition):
    def __init__(self, beta, gamma):
        assert issubclass(type(beta),Proposition) \
            and issubclass(type(gamma),Proposition)
        self.left, self.right = beta, gamma
    def __str__(self):
        return("(" + str(self.left )+" or " + str(self.right) + ")")
    def eval(self, prop_eval):
        l, r = self.left.eval(prop_eval), self.right.eval(prop_eval)
        return( l + r - l*r )

def parseTree(p):
    if type(p) == type(""):
        return PropVariable(p)
    if len(p) == 1:
        return parseTree(p[0])
    if len(p) == 2:
        assert( p[0] == "not" )
        return Negation(parseTree(p[1]))
    
    if len(p) == 3:
        if p[1] == "or": return Disjunction(parseTree(p[0]), parseTree(p[2]))
        raise Exception("length 3 list but unrecognized middle token")
    raise Exception("length of list unrecognized")

terms = pyparsing.Word(pyparsing.alphas) | "not" | "and" | "or" | "if" | "then" | "iff" 
nesting = pyparsing.nestedExpr( '(', ')', content=terms )

def shape(s): 
    p = nesting.parseString("("+s+")")[0]
    
    return parseTree(p)
```

In order to run the code below, one will have to first run the code above.

In the code below, we will write an evaluation function which essentially just reproduces the rules above, but implemented on the `Proposition` objects from before.

Of course, now we need a new object in our program, to represent the variable evaluation. This will be a function which returns `True` for some instances of `PropVariable` and `False` for others. Below is one example of a variable evaluation, which returns `True` for `P` and `False` for everything else.

```{python}

def vareval(pv):
    return pv == "P"
```

And now here is the `eval` function. Note that it takes two arguments, a string representing a proposition, and a propositional evaluation.

```{python}
def eval(prop_string, prop_eval):
    return bool((shape(prop_string)).eval(prop_eval))
```

and finally we can demonstrate the code's behavior:

```{python}
prop_string = "Q or (not (not P))"

print(eval(prop_string,vareval))

print(eval(prop_string, lambda x: False))
```

::: {.callout-important title="Extend Evaluation" appearance="minimal"}
Extend the `eval` function to handle conjunction, conditional, and biconditional propositions.
:::